
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

import subprocess
import time
from pathlib import Path
import os  # arriba
import pandas as pd
from PIL import ImageTk, Image

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
from tkinter import font as tkfont



OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / "assets" / "frame0"
FONT_PATH = Path("/home/dvdr/K-utel-Violin/Fonts/Londrina_Solid/LondrinaSolid-Black.ttf")   
BASE_PATH = Path(__file__).resolve().parent.parent.parent
USER_SELECTED_PATH = BASE_PATH / "usuario_seleccionado.txt"
USERS_PATH = BASE_PATH / "Login" / "usuarios"




def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

window.geometry("1440x900")
window.overrideredirect(True)
window.configure(bg = "#32457D")


font_to_use = ("Londrina Solid Black", 96)


canvas = Canvas(
    window,
    bg = "#32457D",
    height = 900,
    width = 1440,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    720.0,
    450.0,
    image=image_image_1
)

def leer_progreso_usuario():
    try:
        with open(USER_SELECTED_PATH, 'r') as f:
            user_id = f.read().strip()
        user_file = USERS_PATH / f"user_{user_id}.txt"

        progreso = []
        with open(user_file, 'r', encoding='utf-8') as f:
            lineas = f.readlines()

        grabar = False
        for linea in lineas:
            if '[Progreso]' in linea:
                grabar = True
                continue
            if grabar and 'Lección' in linea:
                datos = linea.split(':')[1].strip()
                valores = list(map(int, datos.split(',')))
                progreso.append(valores)

        return progreso
    except Exception as e:
        print(f"[ERROR] Al leer el progreso: {e}")
        return []

def generar_graficas_resultado():
    from matplotlib import pyplot as plt
    import numpy as np

    progreso = leer_progreso_usuario()
    if not progreso:
        return

    # RADAR
    etiquetas = ["Brazo Izq", "Hombro", "Cuello", "Brazo der", "Arco", "Violin"]
    num_vars = len(etiquetas)
    angles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()
    angles += angles[:1]

    fig, ax = plt.subplots(figsize=(4, 4), subplot_kw=dict(polar=True))  # Tamaño más compacto
    fig.patch.set_facecolor('#203262')
    ax.set_facecolor('#203262')
    ax.set_theta_offset(np.pi / 2)
    ax.set_theta_direction(-1)

    ax.set_thetagrids(np.degrees(angles[:-1]), etiquetas, color='white')
    if len(progreso) >= 3:
        datos = progreso[2] + [progreso[2][0]]  # Duplica solo una vez para cierre correcto
        max_val = max(progreso[1])


        escala_max = max(2, ((max_val + 1) // 2 + 1) * 2)  # redondea al siguiente múltiplo de 2

        ax.set_ylim(0, escala_max)
        ax.set_yticks(np.arange(2, escala_max + 1, 2))
        ax.set_yticklabels([str(i) for i in np.arange(2, escala_max + 1, 2)], color='white', size=8)

        # redibujar los hexágonos punteados adaptados
        for r in np.arange(2, escala_max + 1, 2):
            ax.plot(angles, [r]*len(angles), color='gray', linewidth=1.2, linestyle='dotted')

        ax.plot(angles, datos, linewidth=2.5, color='#5ce1e6')
        ax.fill(angles, datos, alpha=0.1, color='#5ce1e6')

    ax.tick_params(colors='white')
    ax.yaxis.grid(False)

    for r in [2, 4, 6, 8, 10]:
        ax.plot(angles, [r]*len(angles), color='gray', linewidth=1.2, linestyle='dotted')
    ax.spines['polar'].set_visible(False)

    if len(progreso) >= 2:
        datos = progreso[1] + [progreso[1][0]]  # Lección 2
        ax.plot(angles, datos, linewidth=2.5, color='#5ce1e6')
        ax.fill(angles, datos, alpha=0.1, color='#5ce1e6')

    radar_path = ASSETS_PATH / "image_2.png"
    fig.savefig(radar_path, dpi=100, bbox_inches='tight')
    plt.close(fig)

    # LÍNEA
    try:
        with open(USER_SELECTED_PATH, 'r') as f:
            user_id = f.read().strip()
        csv_path = USERS_PATH / f"user_{user_id}.csv"
        df = pd.read_csv(csv_path)

        df['leccion'] = df['leccion'].str.extract(r'(\d+)').astype(float)
        df_leccion = df[df['leccion'] == 3].sort_values(by='intento', ascending=False).head(10).sort_values(by='intento')

        valores = df_leccion['valor'].tolist()
        fig2, ax2 = plt.subplots(figsize=(4.8, 2.5))
        fig2.patch.set_facecolor('#203262')
        ax2.set_facecolor('#203262')

        ax2.plot(range(1, len(valores)+1), valores, marker='o', color='#6ce5e8', linewidth=2)
                # Línea de referencia punteada en 8.0 (umbral)
        ax2.axhline(y=8.0, color='white', linestyle='dashed', linewidth=1.5)
        ax2.text(len(valores)+0.3, 8.0, "Meta", color='white', fontsize=9, va='center')

        ax2.set_ylim(0, 10)
        ax2.set_xlim(0.5, 10.5)
        ax2.set_xticks([])
        ax2.set_yticks([0, 2, 4, 6, 8, 10])
        ax2.tick_params(colors='white')
        for spine in ax2.spines.values():
            spine.set_color('#203262')

        linea_path = ASSETS_PATH / "image_3.png"
        fig2.savefig(linea_path, dpi=100, bbox_inches='tight')
        plt.close(fig2)
    except Exception as e:
        print(f"[ERROR] Al generar gráfica de línea: {e}")

def actualizar_nivel_usuario_si_corresponde():
    try:
        with open(USER_SELECTED_PATH, 'r') as f:
            user_id = f.read().strip()
        user_file = USERS_PATH / f"user_{user_id}.txt"

        # Cargar el porcentaje más reciente en Lección 2
        porcentaje = cargar_estrellas_con_opacidad()
        if porcentaje < 80:
            print("[INFO] Puntaje insuficiente para subir de nivel.")
            return

        with open(user_file, 'r', encoding='utf-8') as f:
            lineas = f.readlines()

        for i, linea in enumerate(lineas):
            if linea.startswith("Nivel:"):
                nivel_actual = int(linea.split(":")[1].strip())
                if nivel_actual < 2:
                    lineas[i] = "Nivel: 2\n"
                    with open(user_file, 'w', encoding='utf-8') as f:
                        f.writelines(lineas)
                    print("[INFO] Nivel del usuario actualizado a 2.")
                else:
                    print("[INFO] Nivel actual ya es 2 o superior.")
                break
    except Exception as e:
        print(f"[ERROR] Al actualizar el nivel del usuario: {e}")


def cargar_estrellas_con_opacidad():
    try:
        with open(USER_SELECTED_PATH, 'r') as f:
            user_id = f.read().strip()
        csv_file = USERS_PATH / f"user_{user_id}.csv"

        df = pd.read_csv(csv_file)
        df_leccion2 = df[df['leccion'].str.contains("Lección 3", na=False)]

        if df_leccion2.empty:
            print("[INFO] No hay registros en Lección 3")
            return 0

        valor = df_leccion2.sort_values(by="intento", ascending=False).iloc[0]["valor"]
        porcentaje = int(round(valor / 10 * 100))
        print(f"[INFO] Último puntaje: {valor} → {porcentaje}%")
        return porcentaje
    except Exception as e:
        print(f"[ERROR] Al cargar estrellas: {e}")
        return 0

def cargar_estrella_opaca(file_path, position, visible):
    img = Image.open(file_path).convert("RGBA")
    if not visible:
        img.putalpha(0)
    photo = ImageTk.PhotoImage(img)
    image_id = canvas.create_image(*position, image=photo)
    return photo, image_id

def volver_al_menu():
    print("[DEBUG] Botón presionado: volver al menú")
    button_1.config(state="disabled")
    ruta_menu = OUTPUT_PATH.parent.parent / "Menu" / "build" / "gui.py"
    subprocess.Popen(["python3", str(ruta_menu)])
    
    def cerrar_completo():
        window.destroy()
        window.quit()

    window.after(1000, cerrar_completo)  # Espera 1 seg para cierre limpio



button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=volver_al_menu,
    relief="flat",
    bg="#32457D",
    activebackground="#32457D"
)
button_1.place(
    x=976.0,
    y=789.0,
    width=223.6476593017578,
    height=73.9782485961914
)

porcentaje = cargar_estrellas_con_opacidad()
estrellas_visibles = porcentaje // 20  # 0 a 5

imagenes_estrellas = []
archivos = ["image_4.png", "image_5.png", "image_6.png", "image_7.png", "image_8.png"]
posiciones = [(320.0, 271.0), (510.0, 332.0), (720.0, 263.0), (932.0, 332.0), (1120.0, 268.0)]

for i in range(5):
    visible = i < estrellas_visibles
    img, img_id = cargar_estrella_opaca(relative_to_assets(archivos[i]), posiciones[i], visible)
    imagenes_estrellas.append((img, img_id))

# Mensaje según porcentaje
if porcentaje == 100:
    mensaje = "¡Felicidades!"
elif porcentaje >= 80:
    mensaje = "¡Lo lograste!"
elif porcentaje >= 60:
    mensaje = "Ya falta poco"
elif porcentaje >= 40:
    mensaje = "Tú puedes, una vez más"
elif porcentaje >= 20:
    mensaje = "Intentalo de nuevo..."
else:
    mensaje = "¡No te desanimes!"

canvas.create_text(
    720.0,  # centro horizontal del canvas (mitad de 1440)
    100.0,  # ajusta verticalmente donde quieras que aparezca
    anchor="center",
    text=mensaje,
    fill="#FFFFFF",
    font=font_to_use
)


generar_graficas_resultado()
image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    295.0,
    682.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    945.0,
    607.0,
    image=image_image_3
)



actualizar_nivel_usuario_si_corresponde()


window.resizable(False, False)
window.mainloop()
