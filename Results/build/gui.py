
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

import subprocess
import time
from pathlib import Path
import os  # arriba
import pandas as pd
from PIL import ImageTk, Image

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / "assets" / "frame0"

BASE_PATH = Path(__file__).resolve().parent.parent.parent
USER_SELECTED_PATH = BASE_PATH / "usuario_seleccionado.txt"
USERS_PATH = BASE_PATH / "Login" / "usuarios"



def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

window.geometry("1440x900")
window.overrideredirect(True)
window.configure(bg = "#32457D")


canvas = Canvas(
    window,
    bg = "#32457D",
    height = 900,
    width = 1440,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    720.0,
    450.0,
    image=image_image_1
)


def cargar_estrellas_con_opacidad():
    try:
        with open(USER_SELECTED_PATH, 'r') as f:
            user_id = f.read().strip()
        csv_file = USERS_PATH / f"user_{user_id}.csv"

        df = pd.read_csv(csv_file)
        df_leccion2 = df[df['leccion'].str.contains("Lección 2", na=False)]

        if df_leccion2.empty:
            print("[INFO] No hay registros en Lección 2")
            return 0

        valor = df_leccion2.sort_values(by="intento", ascending=False).iloc[0]["valor"]
        porcentaje = int(round(valor / 10 * 100))
        print(f"[INFO] Último puntaje: {valor} → {porcentaje}%")
        return porcentaje
    except Exception as e:
        print(f"[ERROR] Al cargar estrellas: {e}")
        return 0

def cargar_estrella_opaca(file_path, position, visible):
    img = Image.open(file_path).convert("RGBA")
    if not visible:
        img.putalpha(0)
    photo = ImageTk.PhotoImage(img)
    image_id = canvas.create_image(*position, image=photo)
    return photo, image_id

def volver_al_menu():
    print("[DEBUG] Botón presionado: volver al menú")
    button_1.config(state="disabled")
    ruta_menu = OUTPUT_PATH.parent.parent / "Menu" / "build" / "gui.py"
    subprocess.Popen(["python3", str(ruta_menu)])
    window.after(1000, window.destroy)  # Cierre limpio


button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=volver_al_menu,
    relief="flat"
)
button_1.place(
    x=976.0,
    y=789.0,
    width=223.6476593017578,
    height=73.9782485961914
)



canvas.create_text(
    313.0,
    27.0,
    anchor="nw",
    text="BUEN TRABAJO!",
    fill="#FFFFFF",
    font=("LondrinaSolid Black", 96 * -1)
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    295.0,
    682.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    945.0,
    607.0,
    image=image_image_3
)

porcentaje = cargar_estrellas_con_opacidad()
estrellas_visibles = porcentaje // 20  # 0 a 5

imagenes_estrellas = []
archivos = ["image_4.png", "image_5.png", "image_6.png", "image_7.png", "image_8.png"]
posiciones = [(320.0, 271.0), (510.0, 332.0), (720.0, 263.0), (932.0, 332.0), (1120.0, 268.0)]

for i in range(5):
    visible = i < estrellas_visibles
    img, img_id = cargar_estrella_opaca(relative_to_assets(archivos[i]), posiciones[i], visible)
    imagenes_estrellas.append((img, img_id))

window.resizable(False, False)
window.mainloop()
